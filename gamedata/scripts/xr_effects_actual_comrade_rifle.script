function filter_weapons_to(tbl)
    return function (temp, item)
        local id = item:id()
        if IsWeapon(item) then
            tbl[id] = item
        end
    end
end

function notify_weapon_felt_apart()
    local red_color = utils_xml.get_color("d_red")
    local white_color = utils_xml.get_color("pda_white")
    news_manager.send_tip(db.actor, string.format(game.translate_string("actual_comrade_rifle_fail"), red_color, white_color))
end

function xr_effects.reward_faction_gun(actor, actor_npc, p)
    -- param1 - task_id
    if not (p and p[1]) then
        return
    end

    local tm = task_manager.get_task_manager()
    local tsk = tm.task_info[p[1]]
    local giver_id = tsk.task_giver_id
    local npc = giver_id and db.storage[giver_id] and db.storage[giver_id].object

    if not npc then
        notify_weapon_felt_apart()
        return
    end

    local id = npc:id()
    local sim = alife()
    local se_npc = sim:object(id)

    local weapons_before = {}

    npc:iterate_inventory(filter_weapons_to(weapons_before), npc)

    local squad = se_npc.group_id and se_npc.group_id ~= 65535 and alife_object(se_npc.group_id)
    local player_id = squad and squad.player_id
    local squad_name = squad and squad:section_name() or "na"
    local comm = se_npc:community()
    local rank = ranks.get_obj_rank_name(se_npc)
    local data = utils_stpk.get_stalker_data(se_npc)
    local visual = data.visual_name or "na"

    xrs_rnd_npc_loadout.create_item_on_npc(se_npc, squad_name, comm, rank, visual, player_id, "primary")

    local function createInterval(callback)
        CreateTimeEvent("xr_effects_actual_comrade_rifle", "delay_func", 1, function()
            local success = callback()
            if not success then
                createInterval(callback)
            end
            return true
        end)
    end

    createInterval(function()
        local weapons_after = {}
        npc:iterate_inventory(filter_weapons_to(weapons_after), npc)

        local found = false
        for item_id, item in pairs(weapons_after) do
            if not weapons_before[item_id] then
                npc:mark_item_dropped(item, true) --don't spawn ammo for it, see death_manager.script:734
                death_manager.set_weapon_drop_condition(npc,item)
                item:set_ammo_elapsed(0)
                npc:transfer_item(item, db.actor)
                found = true
            end
        end

        return found
    end)
end